struct from Db

mrks = []{
    {
    id: 14,
    abbr : "trg",
    ids : [],
    },
    {
        id : 43,
        abbr : "oak",
        ids : [17,44]
    },
    ...
}
groups := []struct{}
single := []struct{}

collect := NewCollect()


for _, m := range mrks {
    if m.abbr == page[i].abbr {
        if len(m.ids) > 0 {
        g :=     p.CollectToGroup(m.id, m.ids)
        groups = append(groups, g)

        }else {
            p.CollectToSingle()
        }
    }
}




/*
if user -> want auth ? -> call
select * names; abbr -> set in Map[name]=id...
hash sum - of file; compare -> next file is  = uniq ?

readPdf -> save || share -> isAuth -> authByPhone -> fill relative;
case1: share -> client json -> []groups; []single -> request - fetchs(relId, m_id, value) (save in db markers)
client -> sent url\share -> markerId; relId; - receive link

readPdf solve:
return  {
1 variant: []marker -> for graphic
2 variant: []group markers; by date;  []single markers; by date; -> for save data Db
}

save || share :
case1: send request -> for loop []group => {
	fetch(groupId : 43, relId : 22,  []{id: 3, val: 2.1; id : 15 : val: 45})..
}


loop - pdfFiles {
	loop - pdfPages;
	prepare1Variant() {
		getDbMarkerId() // name || abbr
		merge single/group ->
	}
	prepare2Variant() {
		filter by date;
		devide single & group markers
		getDbMarkerId() // name || abbr
	}
}
return client
*/


fetch()markerId, value, date, for_loop; without refernce; maybe add - #order/
fetch group - (groupId, date, relId, { m_id : 17 , values[value: ])

{
  "user": {
    "year_old": "15-01-2000",
    "gender": true,
    "relative_id": 0
  },
  "markers": [
    {
      "marker_id": 31,
      "name": "jelezo",
      "reference": "3.9-8.4",
      "result": [
        {
          "date": "2022-08-04 21:18",
          "value": 5.1
        },
        {
          "date": "2021-10-19 15:01",
          "value": 9.8
        }
      ]
    },
    {
      "marker_id": 15,
      "reference": "5.3-7.5",
      "result": [
        {
          "date": "2022-10-19 15:01",
          "value": 2.9
        },
        {
          "date": "2021-10-19 15:01",
          "value": 5.8
        }
      ]
    }
  ],

  "group_markers": [
    {
      "id": 43,
      "is_group": true,
      "name": "OAK",
      "markers": [
        {
          "id": 30,
          "reference": "12.3-19",
          "values": [
            {
              "date": "2050-12-10 12:03",
              "value": 23.1
            },
            {
              "date": "2049-01-23 15:11",
              "value": 15.92
            }
          ]
        },
        {
          "id": 44,
          "ref": "5.3-8.7",
          "values": [
            {
              "date": "2050-12-10 12:03",
              "value": 3.9
            },
            {
              "date": "2049-09-10 15:11",
              "value": 7.32
            }
          ]
        }
      ]
    }
  ]
}


variant : fetch() to Group; prepare to client side;

{
"group_markers": [
        {
          "id": 43,
          "date": "2050-09-10 15:11",
          "is_group":true,
          "name": "OAK",
          "markers": [
            {
              "id": 30,
              "value": 23.1,
              "ref": "10-30"
            },
            {
              "id": 44,
              "value": 3.92,
              "ref": "1-2.1"
            }
          ]
        },
        {...}
      ]
      }

      /*
	in further
	check author file - by IIN || #order - in Db
	return response - /upload pdf || akgun - 1 variant
	//check username each page ? - 1 user - all pdf
	//nomer zayvki - passed_marker; if nil -> insert; else error
	1 remove duplicate; by #order - no save Db & no pdf parse
	1.3 sort by date;
	birth; gender; name; separate func()
*/
      



